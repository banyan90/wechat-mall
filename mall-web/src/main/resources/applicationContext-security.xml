<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-4.2.xsd http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

	<http pattern="/oauth/rest_token" security="none" />
	<http pattern="/oauth/check_token" security="none" />
	<!-- /oauth/token 是oauth2登陆验证请求的url 用于获取access_token ,默认的生存时间是43200秒，即12小时 -->
	<http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="oauth2AuthenticationManager"
		entry-point-ref="oauth2AuthenticationEntryPoint" use-expressions="false">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_ANONYMOUSLY" />

		<custom-filter position="BASIC_AUTH_FILTER" ref="basicAuth" />
		<custom-filter position="FORM_LOGIN_FILTER" ref="tokenLoginFilter" />
		<logout logout-success-url="/admin/index" />
		<anonymous />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
		<csrf disabled="true" />
	</http>

	<beans:bean id="basicAuth"
		class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<beans:constructor-arg index="0"
			ref="userAuthenticationManager" />
		<beans:constructor-arg index="1"
			ref="oauth2AuthenticationEntryPoint" />
	</beans:bean>

	<!--oauth2 的server所能支持的请求类型 -->
	<oauth2:authorization-server
		client-details-service-ref="clientDetailsService" token-services-ref="tokenServices"
		user-approval-handler-ref="oauthUserApprovalHandler">
		<oauth2:authorization-code
			authorization-code-services-ref="jdbcAuthorizationCodeServices" />
		<oauth2:implicit />
		<oauth2:refresh-token />
		<oauth2:client-credentials />
		<oauth2:password authentication-manager-ref="userAuthenticationManager" />
	</oauth2:authorization-server>

	<!-- 验证的权限控制 -->
	<authentication-manager alias="authenticationManager"
		id="oauth2AuthenticationManager">
		<authentication-provider user-service-ref="oauth2ClientDetailsUserService">
		</authentication-provider>
	</authentication-manager>


	<!-- 密码验证的权限控制 -->
	<authentication-manager id="userAuthenticationManager">
		<authentication-provider ref="userLoginProvider">
		</authentication-provider>
	</authentication-manager>


	<!--token在服务器存储的方式 InMemoryTokenStore ：保存在内存 ；JdbcTokenStore : 保存在数据库中 -->
	<beans:bean id="tokenStore"
		class="org.jiumao.wechatMall.common.auth.oAuth2.CachedJdbcTokenStore">
		<beans:constructor-arg index="0" ref="DataSource" />
	</beans:bean>
	<beans:bean id="tokenServices"
		class="org.jiumao.wechatMall.common.auth.oAuth2.TokenServices">
		<beans:property name="tokenStore" ref="tokenStore" />
		<beans:property name="clientDetailsService" ref="clientDetailsService" />
		<beans:property name="supportRefreshToken" value="true" />
	</beans:bean>


	<beans:bean id="clientDetailsService"
		class="org.jiumao.wechatMall.common.auth.oAuth2.CachedClientAuthService">
		<beans:constructor-arg index="0" ref="DataSource" />
	</beans:bean>

	<beans:bean id="oauth2ClientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="clientDetailsService" />
	</beans:bean>

	<!-- 管理 Authorization code -->
	<beans:bean id="jdbcAuthorizationCodeServices"
		class="org.jiumao.wechatMall.common.auth.oAuth2.CachedAuthorizationCodeServices">
		<beans:constructor-arg index="0" ref="DataSource" />
	</beans:bean>

	<!--处理访问成功 -->
	<beans:bean id="oauth2AuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />
	<!--处理访问拒绝 -->
	<beans:bean id="oauth2AccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
	<!--处理认证点 -->
	<beans:bean id="oauthUserApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler" />
	<!--处理访问控制 -->
	<beans:bean id="oauth2AccessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<beans:constructor-arg>
			<beans:list>
				<beans:bean
					class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
				<beans:bean
					class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>


	<!--指定spring要保护的资源，如果没有这个，访问控制的时候会说没有Authentication object： -->
	<oauth2:resource-server id="mobileResourceServer"
		resource-id="mobile-resource" token-services-ref="tokenServices" />

	<beans:bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="oauth2AuthenticationManager" />
	</beans:bean>
	<!-- http://localhost:8080/wechat-mall/oauth/token?client_id=mobile-client&client_secret=mobile&grant_type=password&username=q294881866&password=294881866 -->
</beans:beans>